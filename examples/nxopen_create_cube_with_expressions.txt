# use expressions to create cube
import math
import NXOpen
import NXOpen.Annotations
import NXOpen.Assemblies
import NXOpen.Drawings
import NXOpen.Features
import NXOpen.GeometricUtilities
import NXOpen.Preferences
import NXOpen.UF
import os

def main() : 

    # 取得 UF 工作階段物件，UF 是 NX 的底層框架，用於存取 NX 內部資料結構和函數
    theUfSession = NXOpen.UF.UFSession.GetUFSession()

    # 關閉所有開啟的零件，避免衝突
    theUfSession.Part.CloseAll() 

    theSession  = NXOpen.Session.GetSession()
    # ----------------------------------------------
    #   Menu: File->New...
    # ----------------------------------------------

    fileNew1 = theSession.Parts.FileNew()

    fileNew1.TemplateFileName = "model-plain-1-mm-template.prt"

    fileNew1.UseBlankTemplate = False

    fileNew1.ApplicationName = "ModelTemplate"

    fileNew1.Units = NXOpen.Part.Units.Millimeters

    fileNew1.RelationType = ""

    fileNew1.UsesMasterModel = "No"

    fileNew1.TemplateType = NXOpen.FileNewTemplateType.Item

    fileNew1.TemplatePresentationName = "Model"

    fileNew1.ItemType = ""

    fileNew1.Specialization = ""

    fileNew1.SetCanCreateAltrep(False)

    fileNew1.NewFileName = "Y:\\model1.prt"

    fileNew1.MasterFileName = ""

    fileNew1.MakeDisplayedPart = True

    fileNew1.DisplayPartOption = NXOpen.DisplayPartOption.AllowAdditional

    # User Function call - UF_PART_ask_part_name

    nXObject1 = fileNew1.Commit()

    workPart = theSession.Parts.Work
    displayPart = theSession.Parts.Display

    fileNew1.Destroy()

    theSession.ApplicationSwitchImmediate("UG_APP_MODELING")

    # ----------------------------------------------
    #   Menu: Insert->Sketch...
    # ----------------------------------------------

    sketchInPlaceBuilder1 = workPart.Sketches.CreateSketchInPlaceBuilder2(NXOpen.Sketch.Null)

    origin1 = NXOpen.Point3d(0.0, 0.0, 0.0)
    normal1 = NXOpen.Vector3d(0.0, 0.0, 1.0)
    plane1 = workPart.Planes.CreatePlane(origin1, normal1, NXOpen.SmartObject.UpdateOption.WithinModeling)

    sketchInPlaceBuilder1.PlaneReference = plane1

    unit1 = workPart.UnitCollection.FindObject("MilliMeter")
    expression1 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

    expression2 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

    sketchAlongPathBuilder1 = workPart.Sketches.CreateSketchAlongPathBuilder(NXOpen.Sketch.Null)

    coordinates1 = NXOpen.Point3d(0.0, 0.0, 0.0)
    point1 = workPart.Points.CreatePoint(coordinates1)

    origin2 = NXOpen.Point3d(0.0, 0.0, 0.0)
    vector1 = NXOpen.Vector3d(0.0, 0.0, 1.0)
    direction1 = workPart.Directions.CreateDirection(origin2, vector1, NXOpen.SmartObject.UpdateOption.WithinModeling)

    origin3 = NXOpen.Point3d(0.0, 0.0, 0.0)
    vector2 = NXOpen.Vector3d(1.0, 0.0, 0.0)
    direction2 = workPart.Directions.CreateDirection(origin3, vector2, NXOpen.SmartObject.UpdateOption.WithinModeling)

    origin4 = NXOpen.Point3d(0.0, 0.0, 0.0)
    matrix1 = NXOpen.Matrix3x3()

    matrix1.Xx = 1.0
    matrix1.Xy = 0.0
    matrix1.Xz = 0.0
    matrix1.Yx = 0.0
    matrix1.Yy = 1.0
    matrix1.Yz = 0.0
    matrix1.Zx = 0.0
    matrix1.Zy = 0.0
    matrix1.Zz = 1.0
    plane2 = workPart.Planes.CreateFixedTypePlane(origin4, matrix1, NXOpen.SmartObject.UpdateOption.WithinModeling)

    xform1 = workPart.Xforms.CreateXformByPlaneXDirPoint(plane2, direction2, point1, NXOpen.SmartObject.UpdateOption.WithinModeling, 0.625, False, False)

    cartesianCoordinateSystem1 = workPart.CoordinateSystems.CreateCoordinateSystem(xform1, NXOpen.SmartObject.UpdateOption.WithinModeling)

    sketchInPlaceBuilder1.Csystem = cartesianCoordinateSystem1

    origin5 = NXOpen.Point3d(0.0, 0.0, 0.0)
    normal2 = NXOpen.Vector3d(0.0, 0.0, 1.0)
    plane3 = workPart.Planes.CreatePlane(origin5, normal2, NXOpen.SmartObject.UpdateOption.WithinModeling)

    expression3 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

    expression4 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

    plane3.SynchronizeToPlane(plane2)

    expression5 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

    origin6 = plane3.Origin

    normal3 = plane3.Normal

    plane3.SetMethod(NXOpen.PlaneTypes.MethodType.Fixed)

    geom1 = []
    plane3.SetGeometry(geom1)

    origin7 = NXOpen.Point3d(0.0, 0.0, 0.0)
    plane3.Origin = origin7

    normal4 = NXOpen.Vector3d(0.0, 0.0, 1.0)
    plane3.Normal = normal4

    plane3.SetAlternate(NXOpen.PlaneTypes.AlternateType.One)

    plane3.Evaluate()

    theSession.Preferences.Sketch.CreateInferredConstraints = True

    theSession.Preferences.Sketch.ContinuousAutoDimensioning = True

    theSession.Preferences.Sketch.DimensionLabel = NXOpen.Preferences.SketchPreferences.DimensionLabelType.Expression

    theSession.Preferences.Sketch.TextSizeFixed = True

    theSession.Preferences.Sketch.FixedTextSize = 3.0

    theSession.Preferences.Sketch.DisplayParenthesesOnReferenceDimensions = True

    theSession.Preferences.Sketch.DisplayReferenceGeometry = False

    theSession.Preferences.Sketch.ConstraintSymbolSize = 3.0

    theSession.Preferences.Sketch.DisplayObjectColor = False

    theSession.Preferences.Sketch.DisplayObjectName = True

    nXObject2 = sketchInPlaceBuilder1.Commit()

    sketch1 = nXObject2
    feature1 = sketch1.Feature

    sketch1.Activate(NXOpen.Sketch.ViewReorient.TrueValue)

    sketchInPlaceBuilder1.Destroy()

    sketchAlongPathBuilder1.Destroy()

    try:
        # Expression is still in use.
        workPart.Expressions.Delete(expression2)
    except NXOpen.NXException as ex:
        ex.AssertErrorCode(1050029)

    try:
        # Expression is still in use.
        workPart.Expressions.Delete(expression1)
    except NXOpen.NXException as ex:
        ex.AssertErrorCode(1050029)

    plane1.DestroyPlane()

    try:
        # Expression is still in use.
        workPart.Expressions.Delete(expression4)
    except NXOpen.NXException as ex:
        ex.AssertErrorCode(1050029)

    try:
        # Expression is still in use.
        workPart.Expressions.Delete(expression3)
    except NXOpen.NXException as ex:
        ex.AssertErrorCode(1050029)

    plane3.DestroyPlane()

    workPart.Expressions.Delete(expression5)

    # ----------------------------------------------
    #   Menu: Insert->Sketch Curve->Rectangle...
    # ----------------------------------------------

    # ----------------------------------------------
    # Creating rectangle using By 2 Points method 
    # ----------------------------------------------
    startPoint1 = NXOpen.Point3d(0.0, 0.0, 0.0)
    endPoint1 = NXOpen.Point3d(53.0, 0.0, 0.0)
    line1 = workPart.Curves.CreateLine(startPoint1, endPoint1)

    startPoint2 = NXOpen.Point3d(53.0, 0.0, 0.0)
    endPoint2 = NXOpen.Point3d(53.0, 57.0, 0.0)
    line2 = workPart.Curves.CreateLine(startPoint2, endPoint2)

    startPoint3 = NXOpen.Point3d(53.0, 57.0, 0.0)
    endPoint3 = NXOpen.Point3d(0.0, 57.0, 0.0)
    line3 = workPart.Curves.CreateLine(startPoint3, endPoint3)

    startPoint4 = NXOpen.Point3d(0.0, 57.0, 0.0)
    endPoint4 = NXOpen.Point3d(0.0, 0.0, 0.0)
    line4 = workPart.Curves.CreateLine(startPoint4, endPoint4)

    theSession.ActiveSketch.AddGeometry(line1, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)

    theSession.ActiveSketch.AddGeometry(line2, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)

    theSession.ActiveSketch.AddGeometry(line3, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)

    theSession.ActiveSketch.AddGeometry(line4, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints)

    geom1_1 = NXOpen.Sketch.ConstraintGeometry()

    geom1_1.Geometry = line1
    geom1_1.PointType = NXOpen.Sketch.ConstraintPointType.EndVertex
    geom1_1.SplineDefiningPointIndex = 0
    geom2_1 = NXOpen.Sketch.ConstraintGeometry()

    geom2_1.Geometry = line2
    geom2_1.PointType = NXOpen.Sketch.ConstraintPointType.StartVertex
    geom2_1.SplineDefiningPointIndex = 0
    sketchGeometricConstraint1 = theSession.ActiveSketch.CreateCoincidentConstraint(geom1_1, geom2_1)

    geom1_2 = NXOpen.Sketch.ConstraintGeometry()

    geom1_2.Geometry = line2
    geom1_2.PointType = NXOpen.Sketch.ConstraintPointType.EndVertex
    geom1_2.SplineDefiningPointIndex = 0
    geom2_2 = NXOpen.Sketch.ConstraintGeometry()

    geom2_2.Geometry = line3
    geom2_2.PointType = NXOpen.Sketch.ConstraintPointType.StartVertex
    geom2_2.SplineDefiningPointIndex = 0
    sketchGeometricConstraint2 = theSession.ActiveSketch.CreateCoincidentConstraint(geom1_2, geom2_2)

    geom1_3 = NXOpen.Sketch.ConstraintGeometry()

    geom1_3.Geometry = line3
    geom1_3.PointType = NXOpen.Sketch.ConstraintPointType.EndVertex
    geom1_3.SplineDefiningPointIndex = 0
    geom2_3 = NXOpen.Sketch.ConstraintGeometry()

    geom2_3.Geometry = line4
    geom2_3.PointType = NXOpen.Sketch.ConstraintPointType.StartVertex
    geom2_3.SplineDefiningPointIndex = 0
    sketchGeometricConstraint3 = theSession.ActiveSketch.CreateCoincidentConstraint(geom1_3, geom2_3)

    geom1_4 = NXOpen.Sketch.ConstraintGeometry()

    geom1_4.Geometry = line4
    geom1_4.PointType = NXOpen.Sketch.ConstraintPointType.EndVertex
    geom1_4.SplineDefiningPointIndex = 0
    geom2_4 = NXOpen.Sketch.ConstraintGeometry()

    geom2_4.Geometry = line1
    geom2_4.PointType = NXOpen.Sketch.ConstraintPointType.StartVertex
    geom2_4.SplineDefiningPointIndex = 0
    sketchGeometricConstraint4 = theSession.ActiveSketch.CreateCoincidentConstraint(geom1_4, geom2_4)

    geom2 = NXOpen.Sketch.ConstraintGeometry()

    geom2.Geometry = line1
    geom2.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    geom2.SplineDefiningPointIndex = 0
    sketchGeometricConstraint5 = theSession.ActiveSketch.CreateHorizontalConstraint(geom2)

    conGeom1_1 = NXOpen.Sketch.ConstraintGeometry()

    conGeom1_1.Geometry = line1
    conGeom1_1.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom1_1.SplineDefiningPointIndex = 0
    conGeom2_1 = NXOpen.Sketch.ConstraintGeometry()

    conGeom2_1.Geometry = line2
    conGeom2_1.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom2_1.SplineDefiningPointIndex = 0
    sketchGeometricConstraint6 = theSession.ActiveSketch.CreatePerpendicularConstraint(conGeom1_1, conGeom2_1)

    conGeom1_2 = NXOpen.Sketch.ConstraintGeometry()

    conGeom1_2.Geometry = line2
    conGeom1_2.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom1_2.SplineDefiningPointIndex = 0
    conGeom2_2 = NXOpen.Sketch.ConstraintGeometry()

    conGeom2_2.Geometry = line3
    conGeom2_2.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom2_2.SplineDefiningPointIndex = 0
    sketchGeometricConstraint7 = theSession.ActiveSketch.CreatePerpendicularConstraint(conGeom1_2, conGeom2_2)

    conGeom1_3 = NXOpen.Sketch.ConstraintGeometry()

    conGeom1_3.Geometry = line3
    conGeom1_3.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom1_3.SplineDefiningPointIndex = 0
    conGeom2_3 = NXOpen.Sketch.ConstraintGeometry()

    conGeom2_3.Geometry = line4
    conGeom2_3.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom2_3.SplineDefiningPointIndex = 0
    sketchGeometricConstraint8 = theSession.ActiveSketch.CreatePerpendicularConstraint(conGeom1_3, conGeom2_3)

    conGeom1_4 = NXOpen.Sketch.ConstraintGeometry()

    conGeom1_4.Geometry = line4
    conGeom1_4.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom1_4.SplineDefiningPointIndex = 0
    conGeom2_4 = NXOpen.Sketch.ConstraintGeometry()

    conGeom2_4.Geometry = line1
    conGeom2_4.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    conGeom2_4.SplineDefiningPointIndex = 0
    sketchGeometricConstraint9 = theSession.ActiveSketch.CreatePerpendicularConstraint(conGeom1_4, conGeom2_4)

    geom1_5 = NXOpen.Sketch.ConstraintGeometry()

    geom1_5.Geometry = line1
    geom1_5.PointType = NXOpen.Sketch.ConstraintPointType.StartVertex
    geom1_5.SplineDefiningPointIndex = 0
    geom2_5 = NXOpen.Sketch.ConstraintGeometry()

    datumCsys1 = workPart.Features.FindObject("SKETCH(1:1B)")
    point2 = datumCsys1.FindObject("POINT 1")
    geom2_5.Geometry = point2
    geom2_5.PointType = NXOpen.Sketch.ConstraintPointType.NotSet
    geom2_5.SplineDefiningPointIndex = 0
    sketchGeometricConstraint10 = theSession.ActiveSketch.CreateCoincidentConstraint(geom1_5, geom2_5)

    dimObject1_1 = NXOpen.Sketch.DimensionGeometry()

    dimObject1_1.Geometry = line1
    dimObject1_1.AssocType = NXOpen.Sketch.AssocType.StartPoint
    dimObject1_1.AssocValue = 0
    dimObject1_1.HelpPoint.X = 0.0
    dimObject1_1.HelpPoint.Y = 0.0
    dimObject1_1.HelpPoint.Z = 0.0
    dimObject1_1.View = NXOpen.NXObject.Null
    dimObject2_1 = NXOpen.Sketch.DimensionGeometry()

    dimObject2_1.Geometry = line1
    dimObject2_1.AssocType = NXOpen.Sketch.AssocType.EndPoint
    dimObject2_1.AssocValue = 0
    dimObject2_1.HelpPoint.X = 0.0
    dimObject2_1.HelpPoint.Y = 0.0
    dimObject2_1.HelpPoint.Z = 0.0
    dimObject2_1.View = NXOpen.NXObject.Null
    dimOrigin1 = NXOpen.Point3d(26.5, -10.761368777932194, 0.0)
    sketchDimensionalConstraint1 = theSession.ActiveSketch.CreateDimension(NXOpen.Sketch.ConstraintType.ParallelDim, dimObject1_1, dimObject2_1, dimOrigin1, NXOpen.Expression.Null, NXOpen.Sketch.DimensionOption.CreateAsAutomatic)

    sketchHelpedDimensionalConstraint1 = sketchDimensionalConstraint1
    dimension1 = sketchHelpedDimensionalConstraint1.AssociatedDimension

    expression6 = sketchHelpedDimensionalConstraint1.AssociatedExpression

    dimObject1_2 = NXOpen.Sketch.DimensionGeometry()

    dimObject1_2.Geometry = line2
    dimObject1_2.AssocType = NXOpen.Sketch.AssocType.StartPoint
    dimObject1_2.AssocValue = 0
    dimObject1_2.HelpPoint.X = 0.0
    dimObject1_2.HelpPoint.Y = 0.0
    dimObject1_2.HelpPoint.Z = 0.0
    dimObject1_2.View = NXOpen.NXObject.Null
    dimObject2_2 = NXOpen.Sketch.DimensionGeometry()

    dimObject2_2.Geometry = line2
    dimObject2_2.AssocType = NXOpen.Sketch.AssocType.EndPoint
    dimObject2_2.AssocValue = 0
    dimObject2_2.HelpPoint.X = 0.0
    dimObject2_2.HelpPoint.Y = 0.0
    dimObject2_2.HelpPoint.Z = 0.0
    dimObject2_2.View = NXOpen.NXObject.Null
    dimOrigin2 = NXOpen.Point3d(63.761368777932191, 28.5, 0.0)
    sketchDimensionalConstraint2 = theSession.ActiveSketch.CreateDimension(NXOpen.Sketch.ConstraintType.ParallelDim, dimObject1_2, dimObject2_2, dimOrigin2, NXOpen.Expression.Null, NXOpen.Sketch.DimensionOption.CreateAsAutomatic)

    sketchHelpedDimensionalConstraint2 = sketchDimensionalConstraint2
    dimension2 = sketchHelpedDimensionalConstraint2.AssociatedDimension

    expression7 = sketchHelpedDimensionalConstraint2.AssociatedExpression

    theSession.Preferences.Sketch.AutoDimensionsToArcCenter = False

    theSession.ActiveSketch.Update()

    theSession.Preferences.Sketch.AutoDimensionsToArcCenter = True

    geoms1 = [NXOpen.SmartObject.Null] * 4 
    geoms1[0] = line1
    geoms1[1] = line2
    geoms1[2] = line3
    geoms1[3] = line4
    theSession.ActiveSketch.UpdateConstraintDisplay(geoms1)

    geoms2 = [NXOpen.SmartObject.Null] * 4 
    geoms2[0] = line1
    geoms2[1] = line2
    geoms2[2] = line3
    geoms2[3] = line4
    theSession.ActiveSketch.UpdateDimensionDisplay(geoms2)

    # ----------------------------------------------
    #   Menu: Insert->Sketch Constraint->Dimension->Linear...
    # ----------------------------------------------

    sketchLinearDimensionBuilder1 = workPart.Sketches.CreateLinearDimensionBuilder(NXOpen.Annotations.Dimension.Null)

    sketchLinearDimensionBuilder1.Origin.Anchor = NXOpen.Annotations.OriginBuilder.AlignmentPosition.MidCenter

    sketchLinearDimensionBuilder1.Origin.SetInferRelativeToGeometry(True)

    sketchLinearDimensionBuilder1.Origin.Plane.PlaneMethod = NXOpen.Annotations.PlaneBuilder.PlaneMethodType.ModelView

    lines1 = []
    sketchLinearDimensionBuilder1.AppendedText.SetBefore(lines1)

    lines2 = []
    sketchLinearDimensionBuilder1.AppendedText.SetAfter(lines2)

    lines3 = []
    sketchLinearDimensionBuilder1.AppendedText.SetAbove(lines3)

    lines4 = []
    sketchLinearDimensionBuilder1.AppendedText.SetBelow(lines4)

    sketchLinearDimensionBuilder1.Origin.Plane.PlaneMethod = NXOpen.Annotations.PlaneBuilder.PlaneMethodType.ModelView

    sketchLinearDimensionBuilder1.Origin.SetInferRelativeToGeometry(True)

    sketchLinearDimensionBuilder1.Driving.DrivingMethod = NXOpen.Annotations.DrivingValueBuilder.DrivingValueMethod.Driving

    dimensionlinearunits1 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits2 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits3 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits4 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits5 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits6 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits7 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits8 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits9 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits10 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    sketchLinearDimensionBuilder1.Origin.SetInferRelativeToGeometry(True)

    sketchLinearDimensionBuilder1.Origin.SetInferRelativeToGeometry(True)

    sketchLinearDimensionBuilder1.Measurement.Direction = NXOpen.Direction.Null

    sketchLinearDimensionBuilder1.Measurement.DirectionView = NXOpen.View.Null

    sketchLinearDimensionBuilder1.Style.DimensionStyle.NarrowDisplayType = NXOpen.Annotations.NarrowDisplayOption.NotSet

    dimensionlinearunits11 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits12 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits13 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits14 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits15 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits16 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits17 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits18 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits19 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits20 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    point1_1 = NXOpen.Point3d(26.5, 57.0, 0.0)
    point2_1 = NXOpen.Point3d(0.0, 0.0, 0.0)
    sketchLinearDimensionBuilder1.FirstAssociativity.SetValue(NXOpen.InferSnapType.SnapType.Mid, line3, workPart.ModelingViews.WorkView, point1_1, NXOpen.TaggedObject.Null, NXOpen.View.Null, point2_1)

    sketchLinearDimensionBuilder1.Origin.SetInferRelativeToGeometry(True)

    dimensionlinearunits21 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits22 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    point1_2 = NXOpen.Point3d(0.0, 57.0, 0.0)
    point2_2 = NXOpen.Point3d(0.0, 0.0, 0.0)
    sketchLinearDimensionBuilder1.SecondAssociativity.SetValue(NXOpen.InferSnapType.SnapType.End, line3, workPart.ModelingViews.WorkView, point1_2, NXOpen.TaggedObject.Null, NXOpen.View.Null, point2_2)

    point1_3 = NXOpen.Point3d(26.5, 57.0, 0.0)
    point2_3 = NXOpen.Point3d(0.0, 0.0, 0.0)
    sketchLinearDimensionBuilder1.FirstAssociativity.SetValue(NXOpen.InferSnapType.SnapType.Mid, line3, workPart.ModelingViews.WorkView, point1_3, NXOpen.TaggedObject.Null, NXOpen.View.Null, point2_3)

    point1_4 = NXOpen.Point3d(0.0, 57.0, 0.0)
    point2_4 = NXOpen.Point3d(0.0, 0.0, 0.0)
    sketchLinearDimensionBuilder1.SecondAssociativity.SetValue(NXOpen.InferSnapType.SnapType.End, line3, workPart.ModelingViews.WorkView, point1_4, NXOpen.TaggedObject.Null, NXOpen.View.Null, point2_4)

    dimensionlinearunits23 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits24 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits25 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits26 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits27 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits28 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    sketchLinearDimensionBuilder1.Origin.SetInferRelativeToGeometry(True)

    dimensionlinearunits29 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits30 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits31 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits32 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits33 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits34 = sketchLinearDimensionBuilder1.Style.UnitsStyle.DimensionLinearUnits

    sketchLinearDimensionBuilder1.Destroy()

    parallelDimension1 = dimension2
    sketchLinearDimensionBuilder2 = workPart.Sketches.CreateLinearDimensionBuilder(parallelDimension1)

    sketchLinearDimensionBuilder2.Driving.DrivingMethod = NXOpen.Annotations.DrivingValueBuilder.DrivingValueMethod.Inferred

    sketchLinearDimensionBuilder2.Driving.DrivingMethod = NXOpen.Annotations.DrivingValueBuilder.DrivingValueMethod.Driving

    sketchLinearDimensionBuilder2.Origin.SetInferRelativeToGeometry(True)

    dimensionlinearunits35 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits36 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    sketchLinearDimensionBuilder2.Style.OrdinateStyle.DoglegCreationOption = NXOpen.Annotations.OrdinateDoglegCreationOption.No

    dimensionlinearunits37 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits38 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits39 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits40 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    sketchLinearDimensionBuilder2.Origin.SetInferRelativeToGeometry(True)

    sketchLinearDimensionBuilder2.Origin.SetInferRelativeToGeometry(True)

    sketchLinearDimensionBuilder2.Measurement.Direction = NXOpen.Direction.Null

    sketchLinearDimensionBuilder2.Measurement.DirectionView = NXOpen.View.Null

    sketchLinearDimensionBuilder2.Origin.SetInferRelativeToGeometry(True)

    dimensionlinearunits41 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits42 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits43 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits44 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits45 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits46 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits47 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits48 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits49 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits50 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits51 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits52 = sketchLinearDimensionBuilder2.Style.UnitsStyle.DimensionLinearUnits

    # ----------------------------------------------
    #   Dialog Begin Linear Dimension
    # ----------------------------------------------

    workPart.Expressions.Rename(sketchLinearDimensionBuilder2.Driving.ExpressionValue, "width")

    sketchLinearDimensionBuilder2.Origin.SetInferRelativeToGeometry(True)

    nXObject3 = sketchLinearDimensionBuilder2.Commit()

    expression8 = sketchLinearDimensionBuilder2.Driving.ExpressionValue
    sketchLinearDimensionBuilder2.Destroy()

    parallelDimension2 = dimension1
    sketchLinearDimensionBuilder3 = workPart.Sketches.CreateLinearDimensionBuilder(parallelDimension2)

    sketchLinearDimensionBuilder3.Driving.DrivingMethod = NXOpen.Annotations.DrivingValueBuilder.DrivingValueMethod.Inferred

    sketchLinearDimensionBuilder3.Driving.DrivingMethod = NXOpen.Annotations.DrivingValueBuilder.DrivingValueMethod.Driving

    sketchLinearDimensionBuilder3.Origin.SetInferRelativeToGeometry(True)

    dimensionlinearunits53 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits54 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    sketchLinearDimensionBuilder3.Style.OrdinateStyle.DoglegCreationOption = NXOpen.Annotations.OrdinateDoglegCreationOption.No

    dimensionlinearunits55 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits56 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits57 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits58 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    sketchLinearDimensionBuilder3.Origin.SetInferRelativeToGeometry(True)

    sketchLinearDimensionBuilder3.Origin.SetInferRelativeToGeometry(True)

    sketchLinearDimensionBuilder3.Measurement.Direction = NXOpen.Direction.Null

    sketchLinearDimensionBuilder3.Measurement.DirectionView = NXOpen.View.Null

    sketchLinearDimensionBuilder3.Origin.SetInferRelativeToGeometry(True)

    dimensionlinearunits59 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits60 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits61 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits62 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits63 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits64 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits65 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits66 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits67 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits68 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits69 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    dimensionlinearunits70 = sketchLinearDimensionBuilder3.Style.UnitsStyle.DimensionLinearUnits

    # ----------------------------------------------
    #   Dialog Begin Linear Dimension
    # ----------------------------------------------

    workPart.Expressions.Rename(sketchLinearDimensionBuilder3.Driving.ExpressionValue, "length")

    sketchLinearDimensionBuilder3.Origin.SetInferRelativeToGeometry(True)

    # ----------------------------------------------
    #   Menu: File->Finish Sketch
    # ----------------------------------------------

    nXObject4 = sketchLinearDimensionBuilder3.Commit()

    expression9 = sketchLinearDimensionBuilder3.Driving.ExpressionValue
    sketchLinearDimensionBuilder3.Destroy()

    sketch2 = theSession.ActiveSketch

    theSession.ActiveSketch.Deactivate(NXOpen.Sketch.ViewReorient.TrueValue, NXOpen.Sketch.UpdateLevel.Model)

    # ----------------------------------------------
    #   Menu: Insert->Design Feature->Extrude...
    # ---------------------------------------------

    extrudeBuilder1 = workPart.Features.CreateExtrudeBuilder(NXOpen.Features.Feature.Null)

    section1 = workPart.Sections.CreateSection(0.0094999999999999998, 0.01, 0.5)

    extrudeBuilder1.Section = section1

    extrudeBuilder1.AllowSelfIntersectingSection(True)

    unit2 = extrudeBuilder1.Draft.FrontDraftAngle.Units

    expression10 = workPart.Expressions.CreateSystemExpressionWithUnits("2.00", unit2)

    extrudeBuilder1.DistanceTolerance = 0.01

    extrudeBuilder1.BooleanOperation.Type = NXOpen.GeometricUtilities.BooleanOperation.BooleanType.Create

    targetBodies1 = [NXOpen.Body.Null] * 1 
    targetBodies1[0] = NXOpen.Body.Null
    extrudeBuilder1.BooleanOperation.SetTargetBodies(targetBodies1)

    extrudeBuilder1.Limits.StartExtend.Value.SetFormula("0")

    extrudeBuilder1.Limits.EndExtend.Value.SetFormula("25")

    extrudeBuilder1.Offset.StartOffset.SetFormula("0")

    extrudeBuilder1.Offset.EndOffset.SetFormula("5")

    smartVolumeProfileBuilder1 = extrudeBuilder1.SmartVolumeProfile

    smartVolumeProfileBuilder1.OpenProfileSmartVolumeOption = False

    smartVolumeProfileBuilder1.CloseProfileRule = NXOpen.GeometricUtilities.SmartVolumeProfileBuilder.CloseProfileRuleType.Fci

    extrudeBuilder1.Limits.StartExtend.Value.SetFormula("0")

    extrudeBuilder1.Limits.EndExtend.Value.SetFormula("25")

    extrudeBuilder1.Draft.FrontDraftAngle.SetFormula("2")

    extrudeBuilder1.Draft.BackDraftAngle.SetFormula("2")

    extrudeBuilder1.Offset.StartOffset.SetFormula("0")

    extrudeBuilder1.Offset.EndOffset.SetFormula("5")

    section1.DistanceTolerance = 0.01

    section1.ChainingTolerance = 0.0094999999999999998

    section1.SetAllowedEntityTypes(NXOpen.Section.AllowTypes.OnlyCurves)

    features1 = [NXOpen.Features.Feature.Null] * 1 
    sketchFeature1 = feature1
    features1[0] = sketchFeature1
    curveFeatureRule1 = workPart.ScRuleFactory.CreateRuleCurveFeature(features1)

    section1.AllowSelfIntersection(True)

    rules1 = [None] * 1 
    rules1[0] = curveFeatureRule1
    helpPoint1 = NXOpen.Point3d(0.0, 53.804347052218304, 0.0)
    section1.AddToSection(rules1, line4, NXOpen.NXObject.Null, NXOpen.NXObject.Null, helpPoint1, NXOpen.Section.Mode.Create, False)

    direction3 = workPart.Directions.CreateDirection(sketch2, NXOpen.Sense.Forward, NXOpen.SmartObject.UpdateOption.WithinModeling)

    extrudeBuilder1.Direction = direction3

    expression11 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

    extrudeBuilder1.Limits.EndExtend.Value.SetFormula("42")

    extrudeBuilder1.ParentFeatureInternal = False

    feature2 = extrudeBuilder1.CommitFeature()


    expression12 = extrudeBuilder1.Limits.StartExtend.Value
    expression13 = extrudeBuilder1.Limits.EndExtend.Value
    extrudeBuilder1.Destroy()

    workPart.Expressions.Delete(expression10)

    workPart.Expressions.Delete(expression11)

    # ----------------------------------------------
    #   Menu: Tools->Expressions...
    # ----------------------------------------------
    theSession.Preferences.Modeling.UpdatePending = False

    workPart.Expressions.Rename(expression13, "height")

    # ----------------------------------------------
    #   Menu: File->Save As...
    # ----------------------------------------------
    fileName = "C:\\tmp\\model1.prt"

    if os.path.exists(fileName):
        # 若希望存檔的零件存在, 則先刪除該零件檔案
        os.remove(fileName)
    partSaveStatus1 = workPart.SaveAs(fileName)

    partSaveStatus1.Dispose()
    # ----------------------------------------------
    #   Menu: Tools->Journal->Stop Recording
    # ----------------------------------------------

if __name__ == '__main__':
    main()